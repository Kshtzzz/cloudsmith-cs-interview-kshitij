name: Publish Python Package

on:
  workflow_dispatch:

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_REPOSITORY: "staging"
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}

permissions:
  contents: read
  actions: read

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch latest workflow run ID
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
            | jq -r '.artifacts[] | select(.name=="python-package") | .id' | sort -nr | head -n1)
          if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" = "null" ]; then
            echo "‚ùå No previous artifact found!"
            exit 1
          fi
          echo "‚úÖ Found artifact ID: $LATEST_RUN_ID"
          echo "ARTIFACT_ID=$LATEST_RUN_ID" >> $GITHUB_ENV

      - name: Download artifact
        run: |
          ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ env.ARTIFACT_ID }}/zip"
          curl -L -o artifact.zip -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$ARTIFACT_URL"
          mkdir -p dist
          unzip artifact.zip -d dist

      - name: List directory contents
        run: ls -la dist/

      - name: Install Cloudsmith CLI
        run: |
          python -m pip install --upgrade pip
          pip install cloudsmith-cli

      - name: Debug Environment Variables
        run: |
          echo "Cloudsmith Namespace: ${{ env.CLOUDSMITH_NAMESPACE }}"
          echo "Cloudsmith Repository: ${{ env.CLOUDSMITH_REPOSITORY }}"
          echo "Service Slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}"
          if [ -z "${{ env.CLOUDSMITH_NAMESPACE }}" ] || [ -z "${{ env.CLOUDSMITH_REPOSITORY }}" ]; then
            echo "‚ùå ERROR: Cloudsmith Namespace or Repository is not set!"
            exit 1
          fi

      - name: Authenticate Cloudsmith (Optional)
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          if [ -n "$CLOUDSMITH_API_KEY" ]; then
            echo "‚úÖ Using Cloudsmith API Key for authentication."
            export CLOUDSMITH_API_KEY
          fi

      - name: Push package to Cloudsmith
        run: |
          if ! ls dist/*.tar.gz 1> /dev/null 2>&1; then
            echo "‚ùå No package found to upload"
            exit 1
          fi
          
          echo "üîπ Uploading package to Cloudsmith: ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_REPOSITORY }}"
          
          cloudsmith push python "${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_REPOSITORY }}" dist/*.tar.gz --republish
